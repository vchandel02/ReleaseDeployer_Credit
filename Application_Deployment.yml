---
- name: PlatformCode deployment
  hosts: "{{MachineGroupName}}"
  become: yes
  become_method: runas
  become_user: System
  gather_facts: yes
  vars_files:
   - CommonVars/Application.yml

  ######## Pre deployments steps ########
  pre_tasks:

    ######## Create Package folder ########
    - name: Create Package folder
      win_file:
        path: "{{PackageFolderPath}}"
        state: directory

    ######## Download Core package ########
    - name: Download Core package {{PackageFileName}}{{PackageFileExtension}} from Ansible controller machine to LAN servers
      win_copy:
        src: "{{ PackageSourceLocation }}/{{PackageFileName}}{{PackageFileExtension}}"
        dest: "{{ DestinationFolderPath }}"
        remote_src: no
      

    ######## Extract Core package ########
    - name: Extract Core package {{PackageFileName}}{{PackageFileExtension}} to {{UnzipFolderPath}}
      win_unzip:
        src: "{{DestinationFolderPath}}"
        dest: "{{UnzipFolderPath}}"
        delete_archive: yes
      


    ######## Take backup of DSLs ########
    - name: Take backup of DSLs
      win_shell: |
        $sourceFolder = "{{UnzipFolderPath}}\DSLs"
        $destinationFolder = "{{RemoteHost_DSL_Folder_Path}}"
        $sourceFiles = Get-ChildItem -Path $sourceFolder -File -Recurse
        foreach ($file in $sourceFiles) 
        {
          $fileFullName = "$($file.FullName)"
          $relativePath = $fileFullName -replace "$sourceFolder".Replace('\', '\\'), ""
          Write-Host "Relative path: " $relativePath
          $destinationPath = Join-Path -Path $destinationFolder -ChildPath $relativePath
          if (Test-Path -Path $destinationPath)
          {
              $backupPath = Join-Path -Path {{BackupFolderPath}} -ChildPath "DSLs_{{ ansible_date_time.iso8601_basic_short}}"
              $backupFilePath = Join-Path -Path $backupPath -ChildPath $relativePath
              $backupfolderpath = [System.IO.Path]::GetDirectoryName($backupFilePath)
              if (-not (Test-Path -Path $backupfolderpath))
              {
                New-Item -Path $backupfolderpath -ItemType Directory | Out-Null
              }
              Copy-Item -Path $destinationPath -Destination $backupFilePath -Force
              Write-Host "Backed up $($file.FullName) to $($backupFilePath)"
          }
          else 
          {
            Write-Host "File $($file.FullName) does not exist in the destination folder."
          }
        }
      register: DSLBackupResult

    - name: Verify the DSLs backup 
      debug: 
        var: DSLBackupResult.stdout_lines
      
    ######## Take backup of BatchScripts ########
    - name: Take backup of BatchScripts
      win_shell: |
        $sourceFolder = "{{UnzipFolderPath}}\BatchScripts_Utilities_DbbImages\BatchScripts_Utilities"
        $destinationFolder = "{{RemoteHost_BatchScript_Folder_Path}}"
        $sourceFiles = Get-ChildItem -Path $sourceFolder -File -Recurse
        foreach ($file in $sourceFiles) 
        {
            $fileFullName = "$($file.FullName)"
            $relativePath = $fileFullName -replace "$sourceFolder".Replace('\', '\\'), ""
            Write-Host "Relative path: " $relativePath
            $destinationPath = Join-Path -Path $destinationFolder -ChildPath $relativePath
            if (Test-Path -Path $destinationPath) 
            {
                $backupPath = Join-Path -Path {{BackupFolderPath}} -ChildPath "BatchScripts_{{ ansible_date_time.iso8601_basic_short}}"
                $backupFilePath = Join-Path -Path $backupPath -ChildPath $relativePath
                $backupfolderpath = [System.IO.Path]::GetDirectoryName($backupFilePath)
                if (-not (Test-Path -Path $backupfolderpath)) 
                {
                    New-Item -Path $backupfolderpath -ItemType Directory | Out-Null
                }
                Copy-Item -Path $destinationPath -Destination $backupFilePath -Force
                Write-Host "Backed up $($file.FullName) to $($backupFilePath)"
            }
            else {
                Write-Host "File $($file.FullName) does not exist in the destination folder."
            }
        }
      register: BatchscriptsBackupResult

    - name: Verify the DSLs backup 
      debug: 
        var: BatchscriptsBackupResult.stdout_lines


    

  ########################################################################################################

  ######## Deployement starts ########     

  tasks:

    ######## Deploy DSLs ########

    - name: Deploy DSLs
      win_shell: |
        $sourceFolder = "{{UnzipFolderPath}}\DSLs"
        $destinationFolder = "{{RemoteHost_DSL_Folder_Path}}"
        $sourceFiles = Get-ChildItem -Path $sourceFolder -File -Recurse
        foreach ($file in $sourceFiles) 
        {
            $fileFullName = "$($file.FullName)"
            $relativePath = $fileFullName -replace "$sourceFolder".Replace('\', '\\'), ""
            Write-Host "Relative path: " $relativePath
            $destinationPath = Join-Path -Path $destinationFolder -ChildPath $relativePath
            if (Test-Path -Path $destinationPath) 
            {
                $sourceFilePath = Join-Path -Path $sourceFolder -ChildPath $relativePath
                $sourcefolderpath = [System.IO.Path]::GetDirectoryName($sourceFilePath)
                Copy-Item -Path $sourceFilePath -Destination $destinationPath -Force
            }
            else 
            {
                Write-Host "File $($file.FullName) does not exist in the destination folder."
                Write-Host "Copying file to destination folder"
                $sourceFilePath = Join-Path -Path $sourceFolder -ChildPath $relativePath
                $sourcefolderpath = [System.IO.Path]::GetDirectoryName($sourceFilePath)

                $destinationfolderpath = [System.IO.Path]::GetDirectoryName($destinationPath)
                if ( -not (Test-Path -Path $destinationfolderpath))
                {
                    New-Item -ItemType "directory" -Path $destinationfolderpath
                }

                Copy-Item -Path $sourceFilePath -Destination $destinationPath -Force
                Write-Host "File $($file.FullName) copied to destination folder"
            }
        }

    ######## Deploy BatchScripts ########

    - name: Deploy BatchScripts
      win_shell: |
        $sourceFolder = "{{UnzipFolderPath}}\BatchScripts_Utilities_DbbImages\BatchScripts_Utilities"
        $destinationFolder = "{{RemoteHost_BatchScript_Folder_Path}}"
        $sourceFiles = Get-ChildItem -Path $sourceFolder -File -Recurse
        foreach ($file in $sourceFiles) 
        {
            $fileFullName = "$($file.FullName)"
            $relativePath = $fileFullName -replace "$sourceFolder".Replace('\', '\\'), ""
            Write-Host "Relative path: " $relativePath
            $destinationPath = Join-Path -Path $destinationFolder -ChildPath $relativePath
            if (Test-Path -Path $destinationPath) 
            {
                $sourceFilePath = Join-Path -Path $sourceFolder -ChildPath $relativePath
                $sourcefolderpath = [System.IO.Path]::GetDirectoryName($sourceFilePath)
                Copy-Item -Path $sourceFilePath -Destination $destinationPath -Force
            }
            else 
            {
                Write-Host "File $($file.FullName) does not exist in the destination folder."
                Write-Host "Copying file to destination folder"
                $sourceFilePath = Join-Path -Path $sourceFolder -ChildPath $relativePath
                $sourcefolderpath = [System.IO.Path]::GetDirectoryName($sourceFilePath)

                $destinationfolderpath = [System.IO.Path]::GetDirectoryName($destinationPath)
                if ( -not (Test-Path -Path $destinationfolderpath))
                {
                    New-Item -ItemType "directory" -Path $destinationfolderpath
                }

                Copy-Item -Path $sourceFilePath -Destination $destinationPath -Force
                Write-Host "File $($file.FullName) copied to destination folder"
            }
        }
      